#!/usr/bin/env python
### Copyright (C) 2007 Peter Williams <peter_ono@users.sourceforge.net>

### This program is free software; you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation; version 2 of the License only.

### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.

### You should have received a copy of the GNU General Public License
### along with this program; if not, write to the Free Software
### Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

"""Launch a GUI wrapper for Mercurial (hg)"""

import argparse
import os
import sys
import gtk

from gwsmhg_pkg import i18n

_BUG_TRACK_URL = 'https://sourceforge.net/p/gwsmhg/bugs/'
_DISCUSSION_GRP = 'pwil3058@bigpond.net.au'
_REPORT_REQUEST_MSG = \
_('''<b>Please report this problem by either:
  submitting a bug report at &lt;{url}&gt;
or:
  e-mailing &lt;{grp}&gt;
and including a copy of the details below this message.

Thank you.</b>
''').format(url=_BUG_TRACK_URL, grp=_DISCUSSION_GRP)

def report_exception(exc_data, parent=None):
    def copy_cb(tview):
        tview.get_buffer().copy_clipboard(gtk.clipboard_get())
    import traceback
    msg = ''.join(traceback.format_exception(exc_data[0], exc_data[1], exc_data[2]))
    dialog = gtk.Dialog(title=_('gwsmhg: Unhandled Exception'),
                        parent=parent, flags=gtk.DIALOG_MODAL|gtk.DIALOG_DESTROY_WITH_PARENT,
                        buttons=(gtk.STOCK_CLOSE, gtk.RESPONSE_CLOSE))
    icon = gtk.Image()
    icon.set_from_stock(gtk.STOCK_DIALOG_ERROR, gtk.ICON_SIZE_DIALOG)
    vbox = gtk.VBox()
    vbox.pack_start(icon, expand=False, fill=False)
    hbox = gtk.HBox()
    hbox.pack_start(vbox, expand=False, fill=False)
    label = gtk.Label()
    label.set_selectable(True)
    label.set_markup(_REPORT_REQUEST_MSG)
    hbox.pack_start(label, expand=False, fill=False)
    dialog.get_content_area().pack_start(hbox, expand=False, fill=False)
    sbw = gtk.ScrolledWindow()
    tview = gtk.TextView()
    tview.set_editable(False)
    tview.get_buffer().set_text(msg)
    tview.connect('copy-clipboard', copy_cb)
    sbw.add(tview)
    dialog.get_content_area().pack_end(sbw, expand=True, fill=True)
    dialog.show_all()
    dialog.set_resizable(True)
    dialog.run()
    dialog.destroy()

try:
    from gwsmhg_pkg import gwsm
    from gwsmhg_pkg import ifce
    from gwsmhg_pkg import config
    from gwsmhg_pkg import dialogue
    from gwsmhg_pkg import recollect
except Exception:
    report_exception(sys.exc_info())
    sys.exit(3)

PARSER = argparse.ArgumentParser(description=_('GUI to manage stacked patches'))

PARSER.add_argument(
    'workspace',
    help=_('Directory where patches are to be managed'),
    metavar=_('dir'),
    nargs='?'
)

ARGS = PARSER.parse_args()

if ARGS.workspace:
    try:
        os.chdir(ARGS.workspace)
        recollect.set("gwsmhg", "last_wd", ARGS.workspace)
    except OSError as msg:
        sys.stderr.write(str(msg) + '\n')
        sys.exit(2)
else:
    last_dir = recollect.get("gwsmhg", "last_wd")
    if os.path.isdir(last_dir):
        try:
            os.chdir(last_dir)
        except OSError as msg:
            pass # go back to asking the user where he wants to start
        ARGS.workspace = os.getcwd()


try:
    dialogue.report_any_problems(ifce.init(ARGS.workspace is not None))
    open_dialog = None # we need this later
    if not ifce.in_valid_repo and ARGS.workspace is None:
        open_dialog = config.WSOpenDialog()
        if open_dialog.run() == gtk.RESPONSE_OK:
            wspath = open_dialog.get_path()
            if wspath:
                open_dialog.show_busy()
                result = ifce.chdir(wspath)
                open_dialog.unshow_busy()
                open_dialog.report_any_problems(result)
        else:
            sys.exit()
        open_dialog.show_busy()
    gwsm.MainWindow().show()
    if open_dialog:
        open_dialog.unshow_busy()
        open_dialog.destroy()
    gtk.main()
except (SystemExit, KeyboardInterrupt):
    pass
except Exception:
    report_exception(sys.exc_info())
    sys.exit(3)
finally:
    ifce.close()
